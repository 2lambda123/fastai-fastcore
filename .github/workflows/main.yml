name: CI
on: 
  pull_request:
  push:
    branches: 
      - master
jobs:
  fastcore:
    runs-on: ubuntu-latest
    container: fastdotai/fastai #defined here: https://github.com/fastai/docker-containers/blob/master/fastai-build/Dockerfile
    env:
      download: "true"
      caching: "true"

    steps:
    - uses: actions/checkout@v2
    - name: Install the library
      run: |
        pip install -U nbdev
        pip install -Ue .[dev]
    - name: Read all notebooks
      run: |
        nbdev_read_nbs
    - name: Check if all notebooks are cleaned
      run: |
        echo "Check we are starting with clean git checkout"
        if [ -n "$(git status -uno -s)" ]; then echo "git status is not clean"; false; fi
        echo "Trying to strip out notebooks"
        nbdev_clean_nbs
        echo "Check that strip out was unnecessary"
        git status -s # display the status to see which nbs need cleaning up
        if [ -n "$(git status -uno -s)" ]; then echo -e "!!! Detected unstripped out notebooks\n!!!Remember to run nbdev_install_git_hooks"; false; fi
    - name: Check if there is no diff library/notebooks
      run: |
        if [ -n "$(nbdev_diff_nbs)" ]; then echo -e "!!! Detected difference between the notebooks and the library"; false; fi
    - name: Run fastcore tests
      run: |
        nbdev_test_nbs

  fastai-integration-test:
    container: fastdotai/fastai
    runs-on: ubuntu-latest
    env:
      download: "true"
      caching: "true"
    strategy:
      matrix:
        nb: ['[0-2]','[3-5]','[6-9]']
    steps:
    - name: clone this branch [fastcore]
      uses: actions/checkout@v2
      with:
        path: fastcore/
        
    - name: clone fastai
      uses: actions/checkout@v2
      with:
        repository: 'fastai/fastai'
        path: fastai

    - name: see directories
      run: |
        pwd
        ls
        
    - name: Install libraries
      run: |
        pip install -U nbdev
        cd fastai && pip install -Ue .
        cd fastcore && pip install -Ue .[dev]
        cd ~     
    
    - name: check for cache hit
      uses: actions/cache@v2
      if: env.caching == 'true'
      id: cache
      with:
        path: ~/.fastai/data
        key: 'fastai-test-data-v2'

    - name: download data
      if: env.download == 'true' && steps.cache.outputs.cache-hit != 'true'
      run: |
        ipython /workspace/download_testdata.py
        mkdir -p $HOME/.fastai/data
        find $HOME/.fastai/archive/ -name "*.tgz" -exec tar -xzvf {} -C $HOME/.fastai/data \;
          
    - name: Test fastai notebooks
      run: |
        cd fastai
        nbdev_test_nbs --flags '' --n_workers 3 --pause 0.5 --fname "nbs/[0-9]${{matrix.nb}}*.ipynb"

        
